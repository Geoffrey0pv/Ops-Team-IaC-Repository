# =================================================
# Este archivo usa im√°genes pre-construidas de Docker Hub
# No requiere c√≥digo fuente, solo infraestructura

services:
  # üåê API GATEWAY - Nginx Load Balancer
  nginx-gateway:
    image: nginx:1.29.1
    container_name: api-gateway
    ports:
      - "80:80"     # Puerto principal
      - "8888:8888" # Puerto administrativo
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth-api
      - users-api
      - todos-api
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üîê AUTHENTICATION API - Go + JWT
  auth-api:
    image: raulqode/auth-api:latest
    environment:
      - USERS_API_ADDRESS=http://users-api:8083
      - AUTH_API_PORT=8000
      - ZIPKIN_URL=http://zipkin:9411/api/v2/spans
      - JWT_SECRET=PRFT
    networks:
      - microservices-network
    restart: unless-stopped
    depends_on:
      - users-api

  # üë• USERS API - Spring Boot + Redis Cache
  users-api:
    image: raulqode/users-api:latest
    environment:
      - SERVER_PORT=8083
      - JWT_SECRET=PRFT
      - JAVA_OPTS=-Xmx200m -Xms100m
      - ZIPKIN_URL=http://zipkin:9411/api/v2/spans
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - microservices-network
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ‚úÖ TODOS API - Node.js + Express
  todos-api:
    image: raulqode/todos-api:latest
    environment:
      - REDIS_URL=redis://redis:6379
      - TODO_API_PORT=8082
      - JWT_SECRET=PRFT
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_CHANNEL=log_channel
      - ZIPKIN_URL=http://zipkin:9411/api/v2/spans
    networks:
      - microservices-network
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üñ•Ô∏è FRONTEND - Vue.js SPA
  frontend:
    image: raulqode/frontend:latest
    networks:
      - microservices-network
    environment:
      - PORT=8080
      - AUTH_API_ADDRESS=http://auth-api:8000
      - TODOS_API_ADDRESS=http://todos-api:8082
      - ZIPKIN_URL=http://zipkin:9411
    
    restart: unless-stopped

  # üìù LOG MESSAGE PROCESSOR - Python + Redis
  log-message-processor:
    image: raulqode/log-message-processor:latest
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_CHANNEL=log_channel
      - ZIPKIN_URL=http://zipkin:9411/api/v2/spans
    networks:
      - microservices-network
    restart: unless-stopped
    depends_on:
      - redis

  # üíæ REDIS - Cache & Message Queue
  redis:
    image: redis:7.0-alpine
    container_name: redis-cache
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üìä ZIPKIN - Distributed Tracing
  zipkin:
    image: openzipkin/zipkin:2.23.19
    container_name: zipkin-tracing
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=mem
      - JAVA_OPTS=-Xms512m -Xmx512m
    networks:
      - microservices-network
    restart: unless-stopped

# üåê NETWORKS
networks:
  microservices-network:
    driver: bridge
    name: microservices-net

# üíæ VOLUMES
volumes:
  redis-data:
    driver: local
    name: microservice-redis-data

# üè∑Ô∏è LABELS
x-project-info:
  name: "Microservice Infrastructure"
  version: "1.0.0"
  description: "Cloud-native microservices with Docker Hub images"
  author: "Geoffrey0pv"
  repository: "https://github.com/Geoffrey0pv/Ops-Team-IaC-Repository"
